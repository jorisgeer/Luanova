/* syntab.i - LL(1-2) parser tables

   generated by gensyn 0.1.0-alpha  3 Oct 2022  5:14  @nodiff

   from grammar lua.syn version 0.1.0 27 Sep 2022  9:53 lang lua @nodiff */

static const char synfname[] = "lua.syn"; // @nodiff
static const char syninfo[] = "lua.syn 0.1.0  27 Sep 2022  9:53 lua"; // @nodiff

enum Packed8 Nterm { // 16
  Nstmts     =  0, Nstmt      =  1, Nblock     =  2, Ndotlst    =  3, Nnamlst    =  4, Natrnamlst =  5, Nargs      =  6, Nelsif     =  7, 
  Nfield     =  8, Nfldlst    =  9, NexpLst    = 10, Nexplst    = 11, Nprimsfx   = 12, Nprimex    = 13, Nuexp      = 14, Nexpr      = 15, 
  Ncount = 16
};

static ub2 ntnampos[16] = { 0,6,11,17,24,31,41,46,52,58,65,72,79,87,94,99 };

static const char ntnampool[120] = "stmts\0stmt\0block\0dotlst\0namlst\0atrnamlst\0args\0elsif\0field\0fldlst\0expLst\0explst\0primsfx\0primex\0uexp\0expr\0";

enum Packed8 Symbol { // 61
  Sdo        =  0, Selse      =  1, Selseif    =  2, Send       =  3, Sfalse     =  4, Sfor       =  5, Sfunction  =  6, Sgoto      =  7, 
  Sif        =  8, Sin        =  9, Slocal     = 10, Snil       = 11, Snot       = 12, Srepeat    = 13, Sreturn    = 14, Sthen      = 15, 
  Strue      = 16, Suntil     = 17, Swhile     = 18, Sctlxfer   = 19, Sid        = 20, Snlit      = 21, Sslit      = 22, Sop        = 23, 
  Saas       = 24, Sco        = 25, Scc        = 26, Ssepa      = 27, Scomma     = 28, Sro        = 29, Src        = 30, Sso        = 31, 
  Ssc        = 32, Sao        = 33, Sac        = 34, Sdas       = 35, Scolon     = 36, Sdcol      = 37, Sdot       = 38, Sell       = 39, 
  
  Stoken     = 40,

  Sstmts     = 40, Sstmt      = 41, Sblock     = 42, Sdotlst    = 43, Snamlst    = 44, Satrnamlst = 45, Sargs      = 46, Selsif     = 47,
  Sfield     = 48, Sfldlst    = 49, SexpLst    = 50, Sexplst    = 51, Sprimsfx   = 52, Sprimex    = 53, Suexp      = 54, Sexpr      = 55,
  
  Smrgset    = 56,

  SDaAa      = 56, SDaIn      = 57, SIdEl      = 58, SCoSe      = 59, SIdNlSlEl  = 60, Scount     = 61
};

typedef ub1 Mrgbits;

static Mrgbits tkmrgtab[40] = { 0,0,0,0,16,0,0,0,0,2,0,16,0,0,0,0,16,0,0,0,20,16,16,0,1,0,0,8,8,0,0,0,0,0,0,3,0,0,0,20 };

// < tablen = sentry < 1dirtok = argdir < laid = la

static const ub2 vprdmap[34] = { 0x0,0x101,0x102,0x103,0x104,0x105,0x106,0x107,0x108,0x109,0x10a,0x20b,0x20b,0x30c,0x40d,0x50e,0x60f,0x710,0x811,0x812,0x913,0xa14,0xb15,0xc16,0xc16,0xc17,0xc18,0xc19,0xd1a,0xd1b,0xd1c,0xe1d,0xe1d,0xf1e }; // rule.se

// nod 1 argc 3 rep.1 s0.1 si.2 len.4 
static const ub2 syntabeas[34] = {
  0x182, // -1.*. .0.2
  0x303, // -3. . .0.3
  0x142, // -1. .>.0.2
  0x141, // -1. .>.0.1
  0x142, // -1. .>.0.2
  0x244, // -2. .>.0.4
  0x243, // -2. .>.0.3
  0x447, // -4. .>.0.7
  0x345, // -3. .>.0.5
  0x243, // -2. .>.0.3
  0x142, // -1. .>.0.2
  0xa04, // +2. . .0.4
  0xa14, // +2. . .1.4
  0x182, // -1.*. .0.2
  0x182, // -1.*. .0.2
  0x285, // -2.*. .0.5
  0x142, // -1. .>.0.2
  0x284, // -2.*. .0.4
  0x244, // -2. .>.0.4
  0x203, // -2. . .0.3
  0x202, // -2. . .0.2
  0x182, // -1.*. .0.2
  0x182, // -1.*. .0.2
  0x205, // -2. . .0.5
  0x225, // -2. . .2.5
  0x142, // -1. .>.0.2
  0x142, // -1. .>.0.2
  0x141, // -1. .>.0.1
  0x241, // -2. .>.0.1
  0x142, // -1. .>.0.2
  0x446, // -4. .>.0.6
  0x202, // -2. . .0.2
  0x212, // -2. . .1.2
  0x282  // -2.*. .0.2
};

static enum Astyp prd2nod[Plaid] = {
  [Pstmt]         = Acount,
  [Pasgnst]       = Acount,
  [Plabel]        = Acount,
  [Pgoto]         = Acount,
  [Pdo]           = Acount,
  [Pwhile]        = Acount,
  [Prepeat]       = Acount,
  [Pif]           = Acount,
  [Pforit]        = Acount,
  [Pstmt_9]       = Acount,
  [Pmod]          = Acount,
  [Pblk_0]        = Ablk,
  [Pblk_1]        = Ablk,
  [Pdotlst]       = Acount,
  [Pnamlst]       = Acount,
  [Patrnamlst]    = Acount,
  [Pargs_0]       = Acount,
  [Pelsif]        = Acount,
  [Pfield_0]      = Acount,
  [Pfield_1]      = Acount,
  [Pfldlst]       = Acount,
  [PexpLst]       = Acount,
  [Pexplst]       = Acount,
  [Pfncal_0]      = Acount,
  [Pfncal_2]      = Acount,
  [Pndxpr]        = Acount,
  [Ptblexp]       = Acount,
  [Pndxprx]       = Acount,
  [Pprimex_0]     = Acount,
  [Pgrpexp]       = Acount,
  [Pfndef]        = Acount,
  [Puexp_0]       = Acount,
  [Puexp_1]       = Acount,
  [Ppexp]         = Acount,
  [Pctlxfer_stmt]  = Acount,
  [Psepa_block]   = Acount,
  [Pslit_args]    = Acount
};

static enum Astyp Prd2nod[Plaid] = {
  [Pstmt]         = Acount,
  [Pasgnst]       = Acount,
  [Plabel]        = Acount,
  [Pgoto]         = Acount,
  [Pdo]           = Acount,
  [Pwhile]        = Acount,
  [Prepeat]       = Acount,
  [Pif]           = Acount,
  [Pforit]        = Acount,
  [Pstmt_9]       = Acount,
  [Pmod]          = Acount,
  [Pblk_0]        = Acount,
  [Pblk_1]        = Acount,
  [Pdotlst]       = Acount,
  [Pnamlst]       = Acount,
  [Patrnamlst]    = Acount,
  [Pargs_0]       = Acount,
  [Pelsif]        = Acount,
  [Pfield_0]      = Acount,
  [Pfield_1]      = Acount,
  [Pfldlst]       = Acount,
  [PexpLst]       = Acount,
  [Pexplst]       = Acount,
  [Pfncal_0]      = Acount,
  [Pfncal_2]      = Acount,
  [Pndxpr]        = Acount,
  [Ptblexp]       = Acount,
  [Pndxprx]       = Acount,
  [Pprimex_0]     = Acount,
  [Pgrpexp]       = Acount,
  [Pfndef]        = Acount,
  [Puexp_0]       = Acount,
  [Puexp_1]       = Acount,
  [Ppexp]         = Acount,
  [Pctlxfer_stmt]  = Acount,
  [Psepa_block]   = Acount,
  [Pslit_args]    = Acount
};

static const enum Nterm startrule = Nstmts; // 0
static const ub1 startve = 0; // stmt
#define R0n 0x30
#define Rlp 0x38
#define R01 8
#define R02 0x10
#define R03 0x18

static const struct sentry syntab[31] = { // 31 * 24 = 744 B

//  s0         se         line       alt        rule       prod       atr
//  ̲s̲t̲m̲t̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲0̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲5̲0̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲0̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲s̲t̲m̲t̲s̲ ̲ ̲ ̲ ̲ ̲ ̲s̲t̲m̲t̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲-̲1̲.̲*̲.̲ ̲.̲0̲.̲2
{ { Sstmt     ,Ssepa     ,0         ,0         ,0         ,0         ,0         ,0,0,0,0,0 },
  { 1         ,Rlp       ,0         ,0         ,0         ,0         ,0         ,0,0,0,0,0 } },

//  ̲e̲x̲p̲L̲s̲t̲ ̲ ̲ ̲ ̲ ̲1̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲5̲3̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲0̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲s̲t̲m̲t̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲a̲s̲g̲n̲s̲t̲ ̲ ̲ ̲ ̲ ̲-̲3̲.̲ ̲.̲ ̲.̲0̲.̲3
{ { SexpLst   ,SDaAa     ,SexpLst   ,0         ,0         ,0         ,0         ,0,0,0,0,0 },
  { 1         ,R02|2     ,3         ,0         ,0         ,0         ,0         ,0,0,0,0,0 } },

//  ̲d̲c̲o̲l̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲2̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲5̲4̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲1̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲s̲t̲m̲t̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲l̲a̲b̲e̲l̲ ̲ ̲ ̲ ̲ ̲ ̲-̲1̲.̲ ̲.̲>̲.̲0̲.̲2
{ { Sid       ,Sdcol     ,0         ,0         ,0         ,0         ,0         ,0,0,0,0,0 },
  { 1         ,0         ,0         ,0         ,0         ,0         ,0         ,0,0,0,0,0 } },

//  ̲g̲o̲t̲o̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲3̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲5̲6̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲3̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲s̲t̲m̲t̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲g̲o̲t̲o̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲-̲1̲.̲ ̲.̲>̲.̲0̲.̲1
{ { Sid       ,0         ,0         ,0         ,0         ,0         ,0         ,0,0,0,0,0 },
  { 1         ,0         ,0         ,0         ,0         ,0         ,0         ,0,0,0,0,0 } },

//  ̲d̲o̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲4̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲5̲7̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲4̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲s̲t̲m̲t̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲d̲o̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲-̲1̲.̲ ̲.̲>̲.̲0̲.̲2
{ { Sblock    ,Send      ,0         ,0         ,0         ,0         ,0         ,0,0,0,0,0 },
  { 1         ,0         ,0         ,0         ,0         ,0         ,0         ,0,0,0,0,0 } },

//  ̲w̲h̲i̲l̲e̲ ̲ ̲ ̲ ̲ ̲ ̲5̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲5̲8̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲5̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲s̲t̲m̲t̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲w̲h̲i̲l̲e̲ ̲ ̲ ̲ ̲ ̲ ̲-̲2̲.̲ ̲.̲>̲.̲0̲.̲4
{ { Sexpr     ,Sdo       ,Sblock    ,Send      ,0         ,0         ,0         ,0,0,0,0,0 },
  { 1         ,0         ,2         ,0         ,0         ,0         ,0         ,0,0,0,0,0 } },

//  ̲r̲e̲p̲e̲a̲t̲ ̲ ̲ ̲ ̲ ̲6̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲5̲9̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲6̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲s̲t̲m̲t̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲r̲e̲p̲e̲a̲t̲ ̲ ̲ ̲ ̲ ̲-̲2̲.̲ ̲.̲>̲.̲0̲.̲3
{ { Sblock    ,Suntil    ,Sexpr     ,0         ,0         ,0         ,0         ,0,0,0,0,0 },
  { 1         ,0         ,2         ,0         ,0         ,0         ,0         ,0,0,0,0,0 } },

//  ̲i̲f̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲7̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲6̲0̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲7̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲s̲t̲m̲t̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲i̲f̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲-̲4̲.̲ ̲.̲>̲.̲0̲.̲7
{ { Sexpr     ,Sthen     ,Sblock    ,Selsif    ,Selse     ,Sblock    ,Send      ,0,0,0,0,0 },
  { 1         ,0         ,2         ,3         ,R02       ,4         ,0         ,0,0,0,0,0 } },

//  ̲f̲o̲r̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲8̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲6̲1̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲8̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲s̲t̲m̲t̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲f̲o̲r̲i̲t̲ ̲ ̲ ̲ ̲ ̲ ̲-̲3̲.̲ ̲.̲>̲.̲0̲.̲5
{ { Snamlst   ,SDaIn     ,Sdo       ,Sblock    ,Send      ,0         ,0         ,0,0,0,0,0 },
  { 1         ,2         ,0         ,3         ,0         ,0         ,0         ,0,0,0,0,0 } },

//  ̲l̲o̲c̲a̲l̲ ̲ ̲ ̲ ̲ ̲ ̲9̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲6̲2̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲9̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲s̲t̲m̲t̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲s̲t̲m̲t̲_̲9̲ ̲ ̲ ̲ ̲ ̲-̲2̲.̲ ̲.̲>̲.̲0̲.̲3
{ { Satrnamlst,Sdas      ,Sexplst   ,0         ,0         ,0         ,0         ,0,0,0,0,0 },
  { 1         ,R02       ,2         ,0         ,0         ,0         ,0         ,0,0,0,0,0 } },

//  ̲c̲o̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲1̲0̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲6̲3̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲1̲0̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲s̲t̲m̲t̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲m̲o̲d̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲-̲1̲.̲ ̲.̲>̲.̲0̲.̲2
{ { Sstmts    ,Scc       ,0         ,0         ,0         ,0         ,0         ,0,0,0,0,0 },
  { 1         ,0         ,0         ,0         ,0         ,0         ,0         ,0,0,0,0,0 } },

//  ̲s̲t̲m̲t̲s̲ ̲ ̲ ̲ ̲ ̲ ̲1̲1̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲6̲6̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲0̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲b̲l̲o̲c̲k̲ ̲ ̲ ̲ ̲ ̲ ̲b̲l̲k̲_̲0̲ ̲ ̲ ̲ ̲ ̲ ̲+̲2̲.̲ ̲.̲ ̲.̲0̲.̲4
{ { Sstmts    ,Sreturn   ,Sexpr     ,Ssepa     ,0         ,0         ,0         ,0,0,0,0,0 },
  { 1         ,R02       ,2         ,0         ,0         ,0         ,0         ,0,0,0,0,0 } },

//  ̲i̲d̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲1̲2̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲6̲9̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲0̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲d̲o̲t̲l̲s̲t̲ ̲ ̲ ̲ ̲ ̲d̲o̲t̲l̲s̲t̲ ̲ ̲ ̲ ̲ ̲-̲1̲.̲*̲.̲ ̲.̲0̲.̲2
{ { Sid       ,Sdot      ,0         ,0         ,0         ,0         ,0         ,0,0,0,0,0 },
  { 1         ,Rlp       ,0         ,0         ,0         ,0         ,0         ,0,0,0,0,0 } },

//  ̲I̲d̲E̲l̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲1̲3̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲7̲2̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲0̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲n̲a̲m̲l̲s̲t̲ ̲ ̲ ̲ ̲ ̲n̲a̲m̲l̲s̲t̲ ̲ ̲ ̲ ̲ ̲-̲1̲.̲*̲.̲ ̲.̲0̲.̲2
{ { SIdEl     ,Scomma    ,0         ,0         ,0         ,0         ,0         ,0,0,0,0,0 },
  { 1         ,Rlp       ,0         ,0         ,0         ,0         ,0         ,0,0,0,0,0 } },

//  ̲i̲d̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲1̲4̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲7̲5̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲0̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲a̲t̲r̲n̲a̲m̲l̲s̲t̲ ̲ ̲a̲t̲r̲n̲a̲m̲l̲s̲t̲ ̲ ̲-̲2̲.̲*̲.̲ ̲.̲0̲.̲5
{ { Sid       ,Sao       ,Sid       ,Sac       ,Scomma    ,0         ,0         ,0,0,0,0,0 },
  { 1         ,R03       ,2         ,0         ,Rlp       ,0         ,0         ,0,0,0,0,0 } },

//  ̲r̲o̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲1̲5̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲7̲8̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲0̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲a̲r̲g̲s̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲a̲r̲g̲s̲_̲0̲ ̲ ̲ ̲ ̲ ̲-̲1̲.̲ ̲.̲>̲.̲0̲.̲2
{ { Sexplst   ,Src       ,0         ,0         ,0         ,0         ,0         ,0,0,0,0,0 },
  { 1         ,0         ,0         ,0         ,0         ,0         ,0         ,0,0,0,0,0 } },

//  ̲e̲l̲s̲e̲i̲f̲ ̲ ̲ ̲ ̲ ̲1̲6̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲8̲2̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲0̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲e̲l̲s̲i̲f̲ ̲ ̲ ̲ ̲ ̲ ̲e̲l̲s̲i̲f̲ ̲ ̲ ̲ ̲ ̲ ̲-̲2̲.̲*̲.̲ ̲.̲0̲.̲4
{ { Selseif   ,Sexpr     ,Sthen     ,Sblock    ,0         ,0         ,0         ,0,0,0,0,0 },
  { 0         ,1         ,0         ,2         ,0         ,0         ,0         ,0,0,0,0,0 } },

//  ̲s̲o̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲1̲7̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲8̲5̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲0̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲f̲i̲e̲l̲d̲ ̲ ̲ ̲ ̲ ̲ ̲f̲i̲e̲l̲d̲_̲0̲ ̲ ̲ ̲ ̲-̲2̲.̲ ̲.̲>̲.̲0̲.̲4
{ { Sexpr     ,Ssc       ,Sdas      ,Sexpr     ,0         ,0         ,0         ,0,0,0,0,0 },
  { 1         ,0         ,0         ,2         ,0         ,0         ,0         ,0,0,0,0,0 } },

//  ̲p̲r̲i̲m̲e̲x̲ ̲ ̲ ̲ ̲ ̲1̲8̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲8̲6̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲1̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲f̲i̲e̲l̲d̲ ̲ ̲ ̲ ̲ ̲ ̲f̲i̲e̲l̲d̲_̲1̲ ̲ ̲ ̲ ̲-̲2̲.̲ ̲.̲ ̲.̲0̲.̲3
{ { Sprimex   ,Sdas      ,Sexpr     ,0         ,0         ,0         ,0         ,0,0,0,0,0 },
  { 1         ,R02       ,2         ,0         ,0         ,0         ,0         ,0,0,0,0,0 } },

//  ̲f̲i̲e̲l̲d̲ ̲ ̲ ̲ ̲ ̲ ̲1̲9̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲8̲9̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲0̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲f̲l̲d̲l̲s̲t̲ ̲ ̲ ̲ ̲ ̲f̲l̲d̲l̲s̲t̲ ̲ ̲ ̲ ̲ ̲-̲2̲.̲ ̲.̲ ̲.̲0̲.̲2
{ { Sfield    ,SCoSe     ,0         ,0         ,0         ,0         ,0         ,0,0,0,0,0 },
  { 1         ,Rlp|2     ,0         ,0         ,0         ,0         ,0         ,0,0,0,0,0 } },

//  ̲e̲x̲p̲r̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲2̲0̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲9̲2̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲0̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲e̲x̲p̲L̲s̲t̲ ̲ ̲ ̲ ̲ ̲e̲x̲p̲L̲s̲t̲ ̲ ̲ ̲ ̲ ̲-̲1̲.̲*̲.̲ ̲.̲0̲.̲2
{ { Sexpr     ,Scomma    ,0         ,0         ,0         ,0         ,0         ,0,0,0,0,0 },
  { 1         ,Rlp       ,0         ,0         ,0         ,0         ,0         ,0,0,0,0,0 } },

//  ̲e̲x̲p̲r̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲2̲1̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲9̲5̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲0̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲e̲x̲p̲l̲s̲t̲ ̲ ̲ ̲ ̲ ̲e̲x̲p̲l̲s̲t̲ ̲ ̲ ̲ ̲ ̲-̲1̲.̲*̲.̲ ̲.̲0̲.̲2
{ { Sexpr     ,Scomma    ,0         ,0         ,0         ,0         ,0         ,0,0,0,0,0 },
  { 1         ,Rlp       ,0         ,0         ,0         ,0         ,0         ,0,0,0,0,0 } },

//  ̲c̲o̲l̲o̲n̲ ̲ ̲ ̲ ̲ ̲ ̲2̲2̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲1̲0̲0̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲0̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲p̲r̲i̲m̲s̲f̲x̲ ̲ ̲ ̲ ̲f̲n̲c̲a̲l̲_̲0̲ ̲ ̲ ̲ ̲-̲2̲.̲ ̲.̲ ̲.̲0̲.̲5
{ { Scolon    ,Sid       ,Sro       ,Sexplst   ,Src       ,0         ,0         ,0,0,0,0,0 },
  { R02       ,1         ,0         ,2         ,0         ,0         ,0         ,0,0,0,0,0 } },

//  ̲s̲o̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲2̲3̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲1̲0̲1̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲1̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲p̲r̲i̲m̲s̲f̲x̲ ̲ ̲ ̲ ̲n̲d̲x̲p̲r̲ ̲ ̲ ̲ ̲ ̲ ̲-̲1̲.̲ ̲.̲>̲.̲0̲.̲2
{ { Sexpr     ,Ssc       ,0         ,0         ,0         ,0         ,0         ,0,0,0,0,0 },
  { 1         ,0         ,0         ,0         ,0         ,0         ,0         ,0,0,0,0,0 } },

//  ̲c̲o̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲2̲4̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲1̲0̲2̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲2̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲p̲r̲i̲m̲s̲f̲x̲ ̲ ̲ ̲ ̲t̲b̲l̲e̲x̲p̲ ̲ ̲ ̲ ̲ ̲-̲1̲.̲ ̲.̲>̲.̲0̲.̲2
{ { Sfldlst   ,Scc       ,0         ,0         ,0         ,0         ,0         ,0,0,0,0,0 },
  { 1         ,0         ,0         ,0         ,0         ,0         ,0         ,0,0,0,0,0 } },

//  ̲d̲o̲t̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲2̲5̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲1̲0̲3̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲3̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲p̲r̲i̲m̲s̲f̲x̲ ̲ ̲ ̲ ̲n̲d̲x̲p̲r̲x̲ ̲ ̲ ̲ ̲ ̲-̲1̲.̲ ̲.̲>̲.̲0̲.̲1
{ { Sid       ,0         ,0         ,0         ,0         ,0         ,0         ,0,0,0,0,0 },
  { 1         ,0         ,0         ,0         ,0         ,0         ,0         ,0,0,0,0,0 } },

//  ̲I̲d̲N̲l̲S̲l̲E̲l̲ ̲ ̲ ̲2̲6̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲1̲0̲6̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲0̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲p̲r̲i̲m̲e̲x̲ ̲ ̲ ̲ ̲ ̲p̲r̲i̲m̲e̲x̲_̲0̲ ̲ ̲ ̲-̲2̲.̲ ̲.̲>̲.̲0̲.̲1
{ { Sprimsfx  ,0         ,0         ,0         ,0         ,0         ,0         ,0,0,0,0,0 },
  { R01|2     ,0         ,0         ,0         ,0         ,0         ,0         ,0,0,0,0,0 } },

//  ̲r̲o̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲2̲7̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲1̲0̲7̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲1̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲p̲r̲i̲m̲e̲x̲ ̲ ̲ ̲ ̲ ̲g̲r̲p̲e̲x̲p̲ ̲ ̲ ̲ ̲ ̲-̲1̲.̲ ̲.̲>̲.̲0̲.̲2
{ { Sexpr     ,Src       ,0         ,0         ,0         ,0         ,0         ,0,0,0,0,0 },
  { 1         ,0         ,0         ,0         ,0         ,0         ,0         ,0,0,0,0,0 } },

//  ̲f̲u̲n̲c̲t̲i̲o̲n̲ ̲ ̲ ̲2̲8̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲1̲0̲8̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲2̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲p̲r̲i̲m̲e̲x̲ ̲ ̲ ̲ ̲ ̲f̲n̲d̲e̲f̲ ̲ ̲ ̲ ̲ ̲ ̲-̲4̲.̲ ̲.̲>̲.̲0̲.̲6
{ { Sdotlst   ,Scolon    ,Sid       ,Sargs     ,Sblock    ,Send      ,0         ,0,0,0,0,0 },
  { 1         ,R02       ,2         ,3         ,4         ,0         ,0         ,0,0,0,0,0 } },

//  ̲o̲p̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲2̲9̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲1̲1̲1̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲0̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲u̲e̲x̲p̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲u̲e̲x̲p̲_̲0̲ ̲ ̲ ̲ ̲ ̲-̲2̲.̲ ̲.̲ ̲.̲0̲.̲2
{ { Sop       ,Sprimex   ,0         ,0         ,0         ,0         ,0         ,0,0,0,0,0 },
  { R01|1     ,2         ,0         ,0         ,0         ,0         ,0         ,0,0,0,0,0 } },

//  ̲u̲e̲x̲p̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲3̲0̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲1̲1̲4̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲0̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲e̲x̲p̲r̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲p̲e̲x̲p̲ ̲ ̲ ̲ ̲ ̲ ̲ ̲-̲2̲.̲*̲.̲ ̲.̲0̲.̲2
{ { Suexp     ,Sop       ,0         ,0         ,0         ,0         ,0         ,0,0,0,0,0 },
  { 1         ,Rlp|2     ,0         ,0         ,0         ,0         ,0         ,0,0,0,0,0 } }
};

// max len 7 for 7
#define Syn_maxlen 7

#undef R0n
#undef Rlp
#undef R01
#undef R01
#undef R02
#undef R03
static const struct seinfo stinfo[31] = { // 31 * 16 = 496

// lno  alt s0         desc
 {  50,  0, Sstmt      , "stmt  ;"                        }, //  0 stmts
 {  53,  0, SexpLst    , "expLst DaAa expLst"             }, //  1 stmt
 {  54,  1, Sdcol      , " ::  id  ::"                    }, //  2 stmt
 {  56,  3, Sgoto      , " goto  id"                      }, //  3 stmt
 {  57,  4, Sdo        , " do block  end"                 }, //  4 stmt
 {  58,  5, Swhile     , " while expr  do block  end"     }, //  5 stmt
 {  59,  6, Srepeat    , " repeat block  until expr"      }, //  6 stmt
 {  60,  7, Sif        , " if expr  then block elsif  else block  end" }, //  7 stmt
 {  61,  8, Sfor       , " for namlst DaIn  do block  end" }, //  8 stmt
 {  62,  9, Slocal     , " local atrnamlst  = explst"     }, //  9 stmt
 {  63, 10, Sco        , " { stmts  }"                    }, // 10 stmt
 {  66,  0, Sstmts     , "stmts  return expr  ;"          }, // 11 block
 {  69,  0, Sid        , " id  ."                         }, // 12 dotlst
 {  72,  0, SIdEl      , "IdEl  ,"                        }, // 13 namlst
 {  75,  0, Sid        , " id  <  id  >  ,"               }, // 14 atrnamlst
 {  78,  0, Sro        , " ( explst  )"                   }, // 15 args
 {  82,  0, Selseif    , " elseif expr  then block"       }, // 16 elsif
 {  85,  0, Sso        , " [ expr  ]  = expr"             }, // 17 field
 {  86,  1, Sprimex    , "primex  = expr"                 }, // 18 field
 {  89,  0, Sfield     , "field CoSe"                     }, // 19 fldlst
 {  92,  0, Sexpr      , "expr  ,"                        }, // 20 expLst
 {  95,  0, Sexpr      , "expr  ,"                        }, // 21 explst
 { 100,  0, Scolon     , " :  id  ( explst  )"            }, // 22 primsfx
 { 101,  1, Sso        , " [ expr  ]"                     }, // 23 primsfx
 { 102,  2, Sco        , " { fldlst  }"                   }, // 24 primsfx
 { 103,  3, Sdot       , " .  id"                         }, // 25 primsfx
 { 106,  0, SIdNlSlEl  , "IdNlSlEl primsfx?"              }, // 26 primex
 { 107,  1, Sro        , " ( expr  )"                     }, // 27 primex
 { 108,  2, Sfunction  , " function dotlst  :  id args block  end" }, // 28 primex
 { 111,  0, Sop        , " op? primex"                    }, // 29 uexp
 { 114,  0, Suexp      , "uexp  op"                       }  // 30 expr
};

/* mrg sets

  0  DaAa    s  aas das  ln 53
  1  DaIn    s  in das  ln 61
  2  IdEl    s  id ell  ln 72
  3  CoSe    s  sepa comma  ln 90
  4  IdNlSlEls  false nil true id nlit slit ell  ln 106
*/

#define x Pcount
#define X Pendrep
#define Stbl_tklen 40

static const enum Production prdsel[Ncount * Stbl_tklen] = { // 16 * 40 = 640
// ------ line  50 stmts ------
  Pstmt,             X,                 X,                 X,                  //  0  do                .                 .                 .             
  Pstmt,             Pstmt,             Pstmt,             Pstmt,              //  0  false          0  for            0  function       0  goto          
  Pstmt,             X,                 Pstmt,             Pstmt,              //  0  if                .              0  local          0  nil           
  X,                 Pstmt,             X,                 X,                  //     .              0  repeat            .                 .             
  Pstmt,             X,                 Pstmt,             Pstmt,              //  0  true              .              0  while          0  ctlxfer       
  Pstmt,             Pstmt,             Pstmt,             Pstmt,              //  0  id             0  nlit           0  slit           0  op            
  X,                 Pstmt,             X,                 X,                  //     .              0  co                .                 .             
  X,                 Pstmt,             X,                 X,                  //     .              0  ro                .                 .             
  X,                 X,                 X,                 X,                 
  X,                 Pstmt,             X,                 Pstmt,              //     .              0  dcol              .              0  ell           

// ------ line  53 stmt ------
  Pdo,               x,                 x,                 x,                  //  4  do                .                 .                 .             
  Pasgnst,           Pforit,            Pasgnst,           Pgoto,              //  1  false          8  for            1  function       3  goto          
  Pif,               x,                 Pstmt_9,           Pasgnst,            //  7  if                .              9  local          1  nil           
  x,                 Prepeat,           x,                 x,                  //     .              6  repeat            .                 .             
  Pasgnst,           x,                 Pwhile,            Pctlxfer_stmt,      //  1  true              .              5  while            0,ctlxfer       
  Pasgnst,           Pasgnst,           Pasgnst,           Pasgnst,            //  1  id             1  nlit           1  slit           1  op            
  x,                 Pmod,              x,                 x,                  //     .             10  co                .                 .             
  x,                 Pasgnst,           x,                 x,                  //     .              1  ro                .                 .             
  x,                 x,                 x,                 x,                 
  x,                 Plabel,            x,                 Pasgnst,            //     .              2  dcol              .              1  ell           

// ------ line  66 block ------
  Pblk_0,            x,                 x,                 x,                  // 11  do                .                 .                 .             
  Pblk_0,            Pblk_0,            Pblk_0,            Pblk_0,             // 11  false         11  for           11  function      11  goto          
  Pblk_0,            x,                 Pblk_0,            Pblk_0,             // 11  if                .             11  local         11  nil           
  x,                 Pblk_0,            Pblk_1,            x,                  //     .             11  repeat        12 1return            .             
  Pblk_0,            x,                 Pblk_0,            Pblk_0,             // 11  true              .             11  while         11  ctlxfer       
  Pblk_0,            Pblk_0,            Pblk_0,            Pblk_0,             // 11  id            11  nlit          11  slit          11  op            
  x,                 Pblk_0,            x,                 Psepa_block,        //     .             11  co                .                0,sepa          
  x,                 Pblk_0,            x,                 x,                  //     .             11  ro                .                 .             
  x,                 x,                 x,                 x,                 
  x,                 Pblk_0,            x,                 Pblk_0,             //     .             11  dcol              .             11  ell           

// ------ line  69 dotlst ------
  X,                 X,                 X,                 X,                 
  X,                 X,                 X,                 X,                 
  X,                 X,                 X,                 X,                 
  X,                 X,                 X,                 X,                 
  X,                 X,                 X,                 X,                 
  Pdotlst,           X,                 X,                 X,                  // 13  id                .                 .                 .             
  X,                 X,                 X,                 X,                 
  X,                 X,                 X,                 X,                 
  X,                 X,                 X,                 X,                 
  X,                 X,                 X,                 X,                 

// ------ line  72 namlst ------
  X,                 X,                 X,                 X,                 
  X,                 X,                 X,                 X,                 
  X,                 X,                 X,                 X,                 
  X,                 X,                 X,                 X,                 
  X,                 X,                 X,                 X,                 
  Pnamlst,           X,                 X,                 X,                  // 14  id                .                 .                 .             
  X,                 X,                 X,                 X,                 
  X,                 X,                 X,                 X,                 
  X,                 X,                 X,                 X,                 
  X,                 X,                 X,                 Pnamlst,            //     .                 .                 .             14  ell           

// ------ line  75 atrnamlst ------
  X,                 X,                 X,                 X,                 
  X,                 X,                 X,                 X,                 
  X,                 X,                 X,                 X,                 
  X,                 X,                 X,                 X,                 
  X,                 X,                 X,                 X,                 
  Patrnamlst,        X,                 X,                 X,                  // 15  id                .                 .                 .             
  X,                 X,                 X,                 X,                 
  X,                 X,                 X,                 X,                 
  X,                 X,                 X,                 X,                 
  X,                 X,                 X,                 X,                 

// ------ line  78 args ------
  x,                 x,                 x,                 x,                 
  x,                 x,                 x,                 x,                 
  x,                 x,                 x,                 x,                 
  x,                 x,                 x,                 x,                 
  x,                 x,                 x,                 x,                 
  x,                 x,                 Pslit_args,        x,                  //     .                 .                0,slit              .             
  x,                 x,                 x,                 x,                 
  x,                 Pargs_0,           x,                 x,                  //     .             16  ro                .                 .             
  x,                 x,                 x,                 x,                 
  x,                 x,                 x,                 x,                 

// ------ line  82 elsif ------
  X,                 X,                 Pelsif,            X,                  //     .                 .             17  elseif            .             
  X,                 X,                 X,                 X,                 
  X,                 X,                 X,                 X,                 
  X,                 X,                 X,                 X,                 
  X,                 X,                 X,                 X,                 
  X,                 X,                 X,                 X,                 
  X,                 X,                 X,                 X,                 
  X,                 X,                 X,                 X,                 
  X,                 X,                 X,                 X,                 
  X,                 X,                 X,                 X,                 

// ------ line  85 field ------
  x,                 x,                 x,                 x,                 
  Pfield_1,          x,                 Pfield_1,          x,                  // 19  false             .             19  function          .             
  x,                 x,                 x,                 Pfield_1,           //     .                 .                 .             19  nil           
  x,                 x,                 x,                 x,                 
  Pfield_1,          x,                 x,                 x,                  // 19  true              .                 .                 .             
  Pfield_1,          Pfield_1,          Pfield_1,          x,                  // 19  id            19  nlit          19  slit              .             
  x,                 x,                 x,                 x,                 
  x,                 Pfield_1,          x,                 Pfield_0,           //     .             19  ro                .             18  so            
  x,                 x,                 x,                 x,                 
  x,                 x,                 x,                 Pfield_1,           //     .                 .                 .             19  ell           

// ------ line  89 fldlst ------
  x,                 x,                 x,                 x,                 
  Pfldlst,           x,                 Pfldlst,           x,                  // 20  false             .             20  function          .             
  x,                 x,                 x,                 Pfldlst,            //     .                 .                 .             20  nil           
  x,                 x,                 x,                 x,                 
  Pfldlst,           x,                 x,                 x,                  // 20  true              .                 .                 .             
  Pfldlst,           Pfldlst,           Pfldlst,           x,                  // 20  id            20  nlit          20  slit              .             
  x,                 x,                 x,                 x,                 
  x,                 Pfldlst,           x,                 Pfldlst,            //     .             20  ro                .             20  so            
  x,                 x,                 x,                 x,                 
  x,                 x,                 x,                 Pfldlst,            //     .                 .                 .             20  ell           

// ------ line  92 expLst ------
  X,                 X,                 X,                 X,                 
  PexpLst,           X,                 PexpLst,           X,                  // 21  false             .             21  function          .             
  X,                 X,                 X,                 PexpLst,            //     .                 .                 .             21  nil           
  X,                 X,                 X,                 X,                 
  PexpLst,           X,                 X,                 X,                  // 21  true              .                 .                 .             
  PexpLst,           PexpLst,           PexpLst,           PexpLst,            // 21  id            21  nlit          21  slit          21  op            
  X,                 X,                 X,                 X,                 
  X,                 PexpLst,           X,                 X,                  //     .             21  ro                .                 .             
  X,                 X,                 X,                 X,                 
  X,                 X,                 X,                 PexpLst,            //     .                 .                 .             21  ell           

// ------ line  95 explst ------
  X,                 X,                 X,                 X,                 
  Pexplst,           X,                 Pexplst,           X,                  // 22  false             .             22  function          .             
  X,                 X,                 X,                 Pexplst,            //     .                 .                 .             22  nil           
  X,                 X,                 X,                 X,                 
  Pexplst,           X,                 X,                 X,                  // 22  true              .                 .                 .             
  Pexplst,           Pexplst,           Pexplst,           Pexplst,            // 22  id            22  nlit          22  slit          22  op            
  X,                 X,                 X,                 X,                 
  X,                 Pexplst,           X,                 X,                  //     .             22  ro                .                 .             
  X,                 X,                 X,                 X,                 
  X,                 X,                 X,                 Pexplst,            //     .                 .                 .             22  ell           

// ------ line 100 primsfx ------
  x,                 x,                 x,                 x,                 
  x,                 x,                 x,                 x,                 
  x,                 x,                 x,                 x,                 
  x,                 x,                 x,                 x,                 
  x,                 x,                 x,                 x,                 
  x,                 x,                 x,                 x,                 
  x,                 Ptblexp,           x,                 x,                  //     .             26  co                .                 .             
  x,                 Pfncal_2,          x,                 Pndxpr,             //     .             24 2ro                .             25  so            
  x,                 x,                 x,                 x,                 
  Pfncal_0,          x,                 Pndxprx,           x,                  // 23  colon             .             27  dot               .             

// ------ line 106 primex ------
  x,                 x,                 x,                 x,                 
  Pprimex_0,         x,                 Pfndef,            x,                  // 28  false             .             30  function          .             
  x,                 x,                 x,                 Pprimex_0,          //     .                 .                 .             28  nil           
  x,                 x,                 x,                 x,                 
  Pprimex_0,         x,                 x,                 x,                  // 28  true              .                 .                 .             
  Pprimex_0,         Pprimex_0,         Pprimex_0,         x,                  // 28  id            28  nlit          28  slit              .             
  x,                 x,                 x,                 x,                 
  x,                 Pgrpexp,           x,                 x,                  //     .             29  ro                .                 .             
  x,                 x,                 x,                 x,                 
  x,                 x,                 x,                 Pprimex_0,          //     .                 .                 .             28  ell           

// ------ line 111 uexp ------
  x,                 x,                 x,                 x,                 
  Puexp_1,           x,                 Puexp_1,           x,                  // 32 1false             .             32 1function          .             
  x,                 x,                 x,                 Puexp_1,            //     .                 .                 .             32 1nil           
  x,                 x,                 x,                 x,                 
  Puexp_1,           x,                 x,                 x,                  // 32 1true              .                 .                 .             
  Puexp_1,           Puexp_1,           Puexp_1,           Puexp_0,            // 32 1id            32 1nlit          32 1slit          31  op            
  x,                 x,                 x,                 x,                 
  x,                 Puexp_1,           x,                 x,                  //     .             32 1ro                .                 .             
  x,                 x,                 x,                 x,                 
  x,                 x,                 x,                 Puexp_1,            //     .                 .                 .             32 1ell           

// ------ line 114 expr ------
  X,                 X,                 X,                 X,                 
  Ppexp,             X,                 Ppexp,             X,                  // 33  false             .             33  function          .             
  X,                 X,                 X,                 Ppexp,              //     .                 .                 .             33  nil           
  X,                 X,                 X,                 X,                 
  Ppexp,             X,                 X,                 X,                  // 33  true              .                 .                 .             
  Ppexp,             Ppexp,             Ppexp,             Ppexp,              // 33  id            33  nlit          33  slit          33  op            
  X,                 X,                 X,                 X,                 
  X,                 Ppexp,             X,                 X,                  //     .             33  ro                .                 .             
  X,                 X,                 X,                 X,                 
  X,                 X,                 X,                 Ppexp               //     .                 .                 .             33  ell           
};

#undef x
#undef X

// 140 ve entries  3 dir entries

static const ub1 hiruldep = 22;


static const ub2 poolsizes = 718;
